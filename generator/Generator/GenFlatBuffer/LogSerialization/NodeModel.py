# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LogSerialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NodeModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeModel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeModel
    def RegistrationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeModel
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NodeModel
    def Ports(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from LogSerialization.PortModel import PortModel
            obj = PortModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeModel
    def PortsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeModel
    def PortsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def Start(builder): builder.StartObject(3)
def NodeModelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRegistrationName(builder, registrationName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(registrationName), 0)
def NodeModelAddRegistrationName(builder, registrationName):
    """This method is deprecated. Please switch to AddRegistrationName."""
    return AddRegistrationName(builder, registrationName)
def AddType(builder, type): builder.PrependInt8Slot(1, type, 0)
def NodeModelAddType(builder, type):
    """This method is deprecated. Please switch to AddType."""
    return AddType(builder, type)
def AddPorts(builder, ports): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ports), 0)
def NodeModelAddPorts(builder, ports):
    """This method is deprecated. Please switch to AddPorts."""
    return AddPorts(builder, ports)
def StartPortsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NodeModelStartPortsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPortsVector(builder, numElems)
def End(builder): return builder.EndObject()
def NodeModelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)